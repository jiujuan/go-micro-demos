// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: house.proto

package house

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for House service

func NewHouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for House service

type HouseService interface {
	Build(ctx context.Context, in *RequestData, opts ...client.CallOption) (*ResponseMsg, error)
	GetHouse(ctx context.Context, in *RequestData, opts ...client.CallOption) (*ResponseMsg, error)
}

type houseService struct {
	c    client.Client
	name string
}

func NewHouseService(name string, c client.Client) HouseService {
	return &houseService{
		c:    c,
		name: name,
	}
}

func (c *houseService) Build(ctx context.Context, in *RequestData, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "House.Build", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) GetHouse(ctx context.Context, in *RequestData, opts ...client.CallOption) (*ResponseMsg, error) {
	req := c.c.NewRequest(c.name, "House.GetHouse", in)
	out := new(ResponseMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for House service

type HouseHandler interface {
	Build(context.Context, *RequestData, *ResponseMsg) error
	GetHouse(context.Context, *RequestData, *ResponseMsg) error
}

func RegisterHouseHandler(s server.Server, hdlr HouseHandler, opts ...server.HandlerOption) error {
	type house interface {
		Build(ctx context.Context, in *RequestData, out *ResponseMsg) error
		GetHouse(ctx context.Context, in *RequestData, out *ResponseMsg) error
	}
	type House struct {
		house
	}
	h := &houseHandler{hdlr}
	return s.Handle(s.NewHandler(&House{h}, opts...))
}

type houseHandler struct {
	HouseHandler
}

func (h *houseHandler) Build(ctx context.Context, in *RequestData, out *ResponseMsg) error {
	return h.HouseHandler.Build(ctx, in, out)
}

func (h *houseHandler) GetHouse(ctx context.Context, in *RequestData, out *ResponseMsg) error {
	return h.HouseHandler.GetHouse(ctx, in, out)
}
